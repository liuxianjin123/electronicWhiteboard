<template>
  <div class="box">
    <header>
      <div class="heads">
        <span>
          {{ dataType }}
        </span>
        <ul class="itemBox">
          <template>
            <li
              class="topDataItem"
              v-for="(item, index) in topDataList"
              :key="index"
              :style="{
                border:
                  dataType == '全科'
                    ? '2px dotted #f59a23'
                    : '2px dotted #1e9fff',
              }"
            >
              <p>
                <span>{{ item.name }}</span>
              </p>
              <p>{{ item.num }}人</p>
            </li>
          </template>
        </ul>
      </div>
    </header>
    <section>
      <div class="tableBox">
        <ul>
          <li v-for="(item, index) in showItem" :key="index">
            <div class="titles">
              <div>
                <i></i>
                <span
                  ><b>{{ item.title }}</b></span
                >
              </div>
              <div>
                <a-button type="link" :data-type="item.name"> 查看全部 </a-button>
                <a-button
                  type="danger"
                  style="background: orange; border-color: orange"
                  :data-type="item.name"
                >
                  增加{{ item.title }}
                </a-button>
                <a-button type="primary" :data-type="item.name" :disabled="!isColumns(item.columns).isCheck()"> 批量交接</a-button>
              </div>
            </div>
            <template>
              <a-table
                :columns="isColumns(item.columns).column"
                :data-source="isColumns(item.columns).datas"
                @change="onChange"
                bordered
                :customRow="rowClick"
                size="middle"
                :rowKey="(record,index)=>{return index}"
                :row-selection="{ selectedRowKeys: isColumns(item.columns).selectA, onChange: isColumns(item.columns).selectChange,columnWidth:20,fixed:true}"
              >
                <span slot="assessScoreLower" slot-scope="text,record">
                  {{record.ssy}}/{{record.szy}}
                </span>
                <template slot="address" slot-scope="text, record, index">
                  <a @click="editThis($event)" :data-index="index" :data-type="item.name"
                    ><a-icon type="interaction" /> 交班</a
                  >
                  <a-divider type="vertical" />
                  <a
                    style="color: red"
                    @click="delThis($event)"
                    :data-index="index"
                    :data-type="item.name"
                    ><a-icon type="delete" theme="filled" /> 刪除</a
                  >
                </template>
              </a-table>
            </template>
          </li>
        </ul>
      </div>
    </section>
    <a-drawer
      placement="right"
      :closable="false"
      :visible="drawerVisible"
      @close="onDrawerClose"
      :width="400"
    >
      <p>Some contents...</p>
      <p>Some contents...</p>
      <p>Some contents...</p>
    </a-drawer>
  </div>
</template>
<script>
const colxrhz = [
  {
    title: "床号",
    dataIndex: "bch",
    sorter: (a, b) => a.bch.length - b.bch.length,
    width: "70px",
  },
  {
    title: "姓名",
    dataIndex: "name",
    width: "70px",
  },
  {
    title: "入院诊断",
    dataIndex: "ryzd",
  },
  {
    title: "时间",
    children: [
      {
        title: "新入",
        dataIndex: "xrsj",
        width: 150,
      },
      {
        title: "转入",
        dataIndex: "zrsj",
        width: 150,
      },
    ],
  },
  {
    title: "入院方式",
    dataIndex: "ryfs",
    width: "50px",
  },
  {
    title: "护理级别",
    dataIndex: "hljb",
    width: "50px",
  },
  {
    title: "T(℃)",
    dataIndex: "tw",
    width: "40px",
  },
  {
    title: "P(次分)",
    dataIndex: "mb",
    width: "50px",
  },
  {
    title: "R(次分)",
    dataIndex: "hx",
    width: "50px",
  },
  {
    title: "BP(mmHg)",
    width: "80px",
    scopedSlots: { customRender: 'assessScoreLower' },
  },
  {
    title: "观察要点",
    dataIndex: "gcyd",
    width: "150px",
  },
  {
    title: "上夜病情",
    dataIndex: "sybq",
    width: "150px",
  },
  {
    title: "下夜病情",
    dataIndex: "xybq",
    width: "150px",
  },
  {
    title: "操作",
    width: "150px",
    scopedSlots: { customRender: "address" },
  },
];
const colcyhz = [
  {
    title: "床号",
    dataIndex: "bch",
    sorter: (a, b) => a.bch.length - b.bch.length,
    width: "70px",
  },
  {
    title: "姓名",
    dataIndex: "name",
    width: "70px",
  },
  {
    title: "出院诊断",
    dataIndex: "cyzd",
  },
  {
    title: "时间",
    children: [
      {
        title: "出院",
        dataIndex: "cysj",
        width: 150,
      },
      {
        title: "转科",
        dataIndex: "zksj",
        width: 140,
      },
      {
        title: "死亡",
        dataIndex: "swsj",
        width: 140,
      },
    ],
  },
  {
    title: "转往科室",
    dataIndex: "zwks",
    width: 140,
  },
  {
    title: "操作",
    width: "150px",
    scopedSlots: { customRender: "address" },
  },
];
const xrhz = [
  {
    type:'xrbr',
    bch: "0001床",
    name: "John Brown",
    ryzd: "病人鸡鸡被咬伤",
    xrsj: "2020-02-20 15:35",
    zrsj: "2020-02-20 15:36",
    ryfs:"步行",
    hljb:"一级护理",
    tw:'36.8',
    mb:'35',
    hx:'65',
    ssy:'125',
    szy:'98',
    gcyd:'患者右手边的小拇指上的指甲盖左边有点黑',
    sybq:'患者起来上厕所了',
    xybq:'患者上完厕所了'
  },
];
const cyhz = [
  {
    type:'cyhz',
    bch: "0001床",
    name: "John Brown",
    cyzd: "病人鸡鸡被咬伤",
    cysj: "2020-02-20 15:35",
    zksj: "2020-02-20 15:36",
    swsj: "2020-02-20 15:36",
    zwks:"很惊雷嫩"
  },
];
function onChange(pagination, filters, sorter) {
  console.log("params", pagination, filters, sorter);
}
export default {
  name: "nexreJb",
  data() {
    let topDataList = [
      //顶部数据的集合
      { name: "病人总数", num: "456" },
      { name: "新入患者", num: "2" },
      { name: "转入", num: "3" },
      { name: "出院", num: "4" },
      { name: "转出", num: "4556" },
      { name: "死亡", num: "6456" },
      { name: "一级护理", num: "4567" },
      { name: "手术", num: "8" },
      { name: "分娩", num: "4956" },
      { name: "病重", num: "3" },
      { name: "病危", num: "1" },
      { name: "特殊", num: "4526" },
    ];
    let showItem = [
      //读取过来护士选中那些项目需要展示
      { name: "xrhz", columns: "colxrhz", title: "新入患者" },
      { name: "cyhz",columns:'colcyhz',title:'出院患者'},
      // { name: "zrhz", columns: "colzrhz", title: "转入患者" },
      // { name: "zchz",columns:'colzchz',title:'转出患者'},
      // { name: "swhz",columns:'colswhz',title:'死亡患者'},
      // { name: "yjhl",columns:'colyjhl',title:'一级护理'},
      // { name: "sshz",columns:'colsshz',title:'手术患者'},
      // { name: "fmhz",columns:'colfmhz',title:'分娩患者'},
      // { name: "bwhz",columns:'colbwhz',title:'病重患者'},
      // { name: "bzhz",columns:'colbzhz',title:'病危患者'},
      // { name: "tshz",columns:'coltshz',title:'特殊患者'},
    ];
    return {
      drawerVisible:false,//抽屉显示与隐藏
      topDataList,
      showItem,
      xrhz,
      cyhz,
      colxrhz,
      colcyhz,
      visible: false,
      title1: "白班",
      title2: "夜班",
      dataType: "全科",
      xrhzRowKeys: [],
      cyhzRowKeys: [],
    };
  },
  methods: {
    onChange,
    onDrawerClose(){
      this.drawerVisible=!this.drawerVisible;
      this.$XModal.message({ content:"抽屉操作", status:'success'})
    },
    rowClick(record, index){
      return {
        on: {
          // 鼠标单击行
          click: event => {
            console.log(record,index);
            this.drawerVisible=!this.drawerVisible;
          },
        },
      }
    },
    isColumns(i){//判断分组名，返回对应的表头
      var str=null;
      var dataList =null; 
      var selectAyy=null;
      var selectChange=null;  
      var isCheck=null; 
      switch (i) {
        case "colxrhz":
          str=this.colxrhz;
          dataList=this.xrhz;
          selectAyy=this.xrhzRowKeys;
          selectChange=this.xrhzChange;
          isCheck=this.hasxrhz;
          break;
        case "colcyhz":
          str=this.colcyhz;
          dataList=this.cyhz;
          selectAyy=this.cyhzRowKeys;
          selectChange=this.cyhzChange;
          isCheck=this.hascyhz;
          break;
        default:
          break;
      }
      return {column:str,datas:dataList,selectA:selectAyy,selectChange:selectChange,isCheck:isCheck}
    },
    hasxrhz(){
      return this.xrhzRowKeys.length>0;
    },
    hascyhz(){
      return this.cyhzRowKeys.length>0;
    },
    xrhzChange(selectedRowKeys,selectedRows) {
      console.log('selectedRowKeys changed: ', selectedRowKeys,selectedRows);
      this.xrhzRowKeys = selectedRowKeys;
    },
    cyhzChange(selectedRowKeys,selectedRows) {
      console.log('selectedRowKeys changed: ', selectedRowKeys,selectedRows);
      this.cyhzRowKeys = selectedRowKeys;
    },
  },
};
</script>
<style scoped>
ul {
  list-style: none;
  padding: 0;
  margin: 0;
}
.box {
  height: 100%;
  border-radius: 5px;
}
.box header {
  background: #fff;
  padding: 10px;
  border-radius: 0 0 7px 7px;
}
.box section {
  height: calc(100% - 105px);
  margin-top: 12px;
  border-radius: 7px;
  background: #fff;
  padding: 10px;
}
.box section .tableBox {
  height: 100%;
  overflow-y: auto;
}
.ant-tabs-tab > span {
  font-size: 15px;
  font-weight: bold;
}
.heads {
  display: flex;
  align-items: center;
  text-align: center;
}
.heads > span {
  width: 40px;
  font-size: 17px;
  font-weight: bold;
}
.itemBox {
  flex: 1;
  display: flex;
  justify-content: space-between;
  margin: 0;
  padding: 0;
}
.itemBox li {
  width: 90px;
  height: 60px;
  text-align: center;
  border-radius: 5px;
}
.itemBox li p:first-child {
  margin-top: -12px;
}
.itemBox li p:first-child span {
  background: #fff;
}
.itemBox li p:last-child {
  margin-top: -5px;
  font-size: 15px;
}
.titles {
  display: flex;
  align-items: center;
  justify-content: space-between;
  margin-bottom: 15px;
}
.titles div:first-child i {
  display: inline-block;
  width: 5px;
  height: 28px;
  background: orange;
  vertical-align: middle;
  border-radius: 3px;
}
section >>> .ant-table-thead > tr > th {
  background: #eaf0f6;
  color: #196d9d;
  font-weight: bold;
}
</style>
