<template>
  <div class="pdd">
    <div class="anchor" style="top: 70%;width: 70px;">
      <template>
        <a-anchor :affix="true" :getContainer="()=>this.$refs.questionnaireBox" >
          <template v-for="i in showItem">
            <a-anchor-link  :href="'#'+i.name" :title="i.title.substr(0,2)" :key="i.name" v-if="i.isEnable"/>
          </template>
        </a-anchor>
      </template>
    </div>
    <section class="item-config">
        <a-spin :spinning="spinning" size="large">
        <div @click="echartViews($event)">
            <template v-if="brxxData!=null">
            <vue-seamless-scroll
                :data="brxxData"
                :class-option="classOption"
                class="seamless-warp"
                >
                <div class="container">
                     <section>
                        <div class="tableBox" ref="questionnaireBox">
                            <ul
                            style="height: 100%"
                            >
                            <li
                                v-for="(item, index) in showItem"
                                :key="index"
                                class="lis"
                                :id="item.name"
                            >
                            
                            <template v-if="item.isEnable">
                                <div class="titles">
                                <div>
                                    <i></i>
                                    <span
                                    ><b>{{ item.title }}</b></span
                                    >
                                </div>
                                
                                </div>
                                <template>
                                <a-table
                                    :columns="isColumns(item.columns).column"
                                    :data-source="isColumns(item.columns).datas"
                                    bordered
                                    :pagination="false"
                                    size="small"
                                    :scroll="{ x: '100%', y: 'calc(100vh - 338px)' }"
                                    :rowKey="
                                    (record, index) => {
                                        return index;
                                    }
                                    "
                                  
                                >
                                    <template slot="tw" slot-scope="text,record">
                                        <span  :style='{color:setItemColor(0,record.t)}'>
                                            {{record.t}}
                                        </span>
                                    </template>
                                    <template slot="p" slot-scope="text,record">
                                        <span  :style='{color:setItemColor(2,record.p)}'>
                                            {{record.p}}
                                        </span>
                                    </template>
                                    <template slot="r" slot-scope="text,record">
                                        <span  :style='{color:setItemColor(1,record.r)}'>
                                            {{record.r}}
                                        </span>
                                    </template>
                                    <template slot="spo2" slot-scope="text,record">
                                        <span  :style='{color:setItemColor(3,record.oxygenSaturation)}'>
                                            {{record.oxygenSaturation}}
                                        </span>
                                    </template>
                                    
                                    </a-table>
                                </template>
                                </template>
                            </li>
                            </ul>
                        </div>
                    </section>
                </div>
            </vue-seamless-scroll>
            </template>
        </div>
        </a-spin>

    </section>
   
  </div>
</template>
<script>
import obj from "../../../../static/js/hljjb";

import vueSeamlessScroll from "vue-seamless-scroll";
import { post, get }from '../../../request/request';
import { get1}from '../../../request/request1';

// function getNextDate(date, day) { //当前时间+1或者-1
// 　　var dd = new Date(date);
// 　　dd.setDate(dd.getDate() + day);
// 　　var y = dd.getFullYear();
// 　　var m = dd.getMonth() + 1 < 10 ? "0" + (dd.getMonth() + 1) : dd.getMonth() + 1;
// 　　var d = dd.getDate() < 10 ? "0" + dd.getDate() : dd.getDate();
// 　　return y + "-" + m + "-" + d;
// };
// function GetDateTime() {
//     var d, s;
//     d = new Date();
//     s = d.getFullYear() + "-";             //取年份  
//     s = s + ((d.getMonth() + 1) < 10 ? "0" + (d.getMonth() + 1) : (d.getMonth() + 1)) + "-";//取月份  
//     s += (d.getDate() < 10 ? "0" + d.getDate() : d.getDate()) + " ";         //取日期  
//     s += (d.getHours() < 10 ? "0" + d.getHours() : d.getHours()) + ":";       //取小时  
//     s += (d.getMinutes() < 10 ? "0" + d.getMinutes() : d.getMinutes()) + ":";    //取分  
//     s += (d.getSeconds() < 10 ? "0" + d.getSeconds() : d.getSeconds());         //取秒  
//     return (s);
// }
// let nowDate =  getNextDate(GetDateTime(), -1);

export default {
  name: "nursingBoard",
  data() {
    return {
      checckTemplate: null, //当前点击的模块对应的数组
      isSpin: true, //刷新图标动起来
      isCarousel: true, //是否展示轮播
      brxxData:null,
      spinning:true,
      // 新加
      // nowDate:nowDate,//查询昨天时间
      valVerification:[],//体温，脉搏，呼吸项目的阈值显示
      judgeSymbolType:['<','==','>','<=','>='],//-0小于1等于2大于3小于等于4大于等于
      showItem:obj.showItem, //护士选择了那些项目需要显示
      //table对应的数据源JSON
      hlShioverNewPatientDtos:null,
      hlShioverDischargedPatientDtos:null,
      hlShioverSeriouslyIllPatientDtos:null,
      hlShioverCriticallyIllPatientDtos:null,
      hlShioverSpecialPatientDtos:null,
      hlShioverSurgicalPatientDtos:null,
      hlShioverFirstLevelNursingDtos:null,
      //table对应的数据表头JSON
      colxrhz:obj.colxrhz.slice(0,obj.colxrhz.length-1),
      colcyhz:obj.colcyhz.slice(0,obj.colcyhz.length-1),
      colbzhz:obj.colbzhz.slice(0,obj.colbzhz.length-1),
      colbwhz:obj.colbwhz.slice(0,obj.colbwhz.length-1),
      coltshz:obj.coltshz.slice(0,obj.coltshz.length-1),
      colsshz:obj.colsshz.slice(0,obj.colsshz.length-1),
      colyjhz:obj.colyjhz.slice(0,obj.colyjhz.length-1),
    };
  },
  components: {
    vueSeamlessScroll,
   
  },
  computed: {
    classOption() {
      return {
        step: 0.5, // 数值越大速度滚动越快
        limitMoveNum:this.brxxData.length, // 开始无缝滚动的数据量 this.dataList.length
        hoverStop: true, // 是否开启鼠标悬停stop
        direction: 1, // 0向下 1向上 2向左 3向右
        openWatch: true, // 开启数据实时监控刷新dom
        singleHeight: 0, // 单步运动停止的高度(默认值0是无缝不停止的滚动) direction => 0/1
        singleWidth: 0, // 单步运动停止的宽度(默认值0是无缝不停止的滚动) direction => 2/3
        waitTime: 200, // 单步运动停止的时间(默认值1000ms)
      };
    },
  },
  methods: {
  
    echartViews(e) {
      var target = e.target;
      if (target.tagName == "I") {
        var zyh = target.getAttribute("data-zyh"),
          brxm = target.getAttribute("data-brxm"),
          brch = target.getAttribute("data-brch");
        if (zyh && brxm && brch) {
          this.$router.push({
            path: "/tendencyEchart",
            query: {
              zyh: zyh,
              brxm: brxm,
              brch: brch,
              bqdm:this.bqdm,
              item:this.item,
              wardName:this.wardName
            },
          });
        }
      }
    },
//    新加方法
     //设置体温，脉搏，呼吸，等项目的阈值显示效果
    setItemColor(type,val){
      var color="";
      for(var i in this.valVerification){
        if(this.valVerification[i].type ==type){
          var newType = this.judgeSymbolType[this.valVerification[i].symbol];
            if(eval(val +''+newType+''+ this.valVerification[i].value)){
              color=this.valVerification[i].colour;
            }
       
        }
      }
      return color==""?"black":color;
    },
    isColumns(i) {
      //判断分组名，返回对应的表头
      var str = null;
      var dataList = null;
      
      switch (i) {
        case "colxrhz":
          str = this.colxrhz;
          dataList = this.hlShioverNewPatientDtos;
          break;
        case "colcyhz":
          str = this.colcyhz;
          dataList = this.hlShioverDischargedPatientDtos;
          break;
        case "colbzhz":
          str = this.colbzhz;
          dataList = this.hlShioverSeriouslyIllPatientDtos;
          break;
        case "colbwhz":
          str = this.colbwhz;
          dataList = this.hlShioverCriticallyIllPatientDtos;
          break;
        case "coltshz":
          str = this.coltshz;
          dataList = this.hlShioverSpecialPatientDtos;
          break;
        case "colsshz":
          str = this.colsshz;
          dataList = this.hlShioverSurgicalPatientDtos;
          break;
        case "colyjhz":
          str = this.colyjhz;
          dataList = this.hlShioverFirstLevelNursingDtos;
          break;
        default:
          break;
      }
      return {
        column: str,
        datas: dataList,
      };
    },

    
    async getDataAll() {//请求数据
    //   this.isSpin =true;
    //   this.spinning = true;
      // const res1=await get('/WhiteBoard/WBApi.ashx/GetPatients',{bqdm:this.bqdm})
      // console.log(res1)
      // if(res1.msg=="成功" && res1.result!=null){
        // this.isSpin =!this.isSpin;
        // this.spinning = !this.spinning;
        // this.brxxData =  res1.result.patients;
      //   console.log(this.brxxData)
      // }

    this.isSpin =true;
    this.spinning = true;
    const res = await get1('/han/HandoverProc/GetWhiteBoardHandoverPatients');
    // console.log(res,11,this.nowDate);
    if(res.result){
        this.hlShioverNewPatientDtos = res.result.hlShioverNewPatientDtos;
        this.hlShioverDischargedPatientDtos =  res.result.hlShioverDischargedPatientDtos;
        this.hlShioverSeriouslyIllPatientDtos =  res.result.hlShioverSeriouslyIllPatientDtos;
        this.hlShioverCriticallyIllPatientDtos =  res.result.hlShioverCriticallyIllPatientDtos;
        this.hlShioverSpecialPatientDtos =  res.result.hlShioverSpecialPatientDtos;
        this.hlShioverSurgicalPatientDtos =  res.result.hlShioverSurgicalPatientDtos;
        this.hlShioverFirstLevelNursingDtos =  res.result.hlShioverFirstLevelNursingDtos;
        this.addField();
        this.isSpin =!this.isSpin;
        this.spinning = !this.spinning;
        this.brxxData = [this.hlShioverNewPatientDtos,
                         this.hlShioverDischargedPatientDtos,
                         this.hlShioverSeriouslyIllPatientDtos,
                         this.hlShioverCriticallyIllPatientDtos,
                         this.hlShioverSpecialPatientDtos,
                         this.hlShioverSurgicalPatientDtos,
                         this.hlShioverFirstLevelNursingDtos,
                        ];
        // console.log(this.brxxData)
      }else{
        this.$message.error(res.msg);
      }
    


    },
    //循环添加两个属性
    addField(){
      var arr=  [
        {name:this.hlShioverNewPatientDtos,type:'hlShioverNewPatientDtos',title:'新入患者'},
        {name:this.hlShioverDischargedPatientDtos,type:'hlShioverDischargedPatientDtos',title:'出院患者'},
        {name:this.hlShioverSeriouslyIllPatientDtos,type:'hlShioverSeriouslyIllPatientDtos',title:'病重患者'},
        {name:this.hlShioverCriticallyIllPatientDtos,type:'hlShioverCriticallyIllPatientDtos',title:'病危患者'},
        {name:this.hlShioverSpecialPatientDtos,type:'hlShioverSpecialPatientDtos',title:'特殊患者'},
        {name:this.hlShioverSurgicalPatientDtos,type:'hlShioverSurgicalPatientDtos',title:'手术患者'},
        {name:this.hlShioverFirstLevelNursingDtos,type:'hlShioverFirstLevelNursingDtos',title:'一级患者'}
        ]
      
      for(let i = 0; i < arr.length; i++){
        for(let y = 0;y<arr[i].name.length;y++){
          arr[i].name[y].type =arr[i].type;
          arr[i].name[y].title =arr[i].title;
        }
      }
    },
    
  },
  mounted() {
    //   var a= eval(6+''+this.judgeSymbolType[0]+''+9);
    //   console.log(a,'sklaksla');
    var query=this.$route.query;
    this.bqdm=query.bqdm;
    this.item=query.item;
    this.wardName = query.wardName;
    this.getDataAll();
    setInterval(() => {//没1h刷新一系整体数据
      this.getDataAll();
    },60*1000*60)
  }
};
</script>

<style  scoped>
@import url("../../../../static/css/hlJJB.css");

/* .tableBox>>>.ant-table-header{
    margin-right: -17px;
} */
.lis{
    margin-top: 30px;
}
.pdd{
  background: #fff;
  border-radius: 10px; 
}
</style>
