<template>
  <div class="box">
    <header>
      <div class="heads">
        <span>
          {{$store.state.dataType==0?"全部":"本人"}}
        </span>
        <ul class="itemBox">
          <template>
            <li
              class="topDataItem"
              v-for="(item, index) in topDataList"
              :key="index"
              :style="{
                border:
                  $store.state.dataType == 0
                    ? '2px dotted #f59a23'
                    : '2px dotted #1e9fff',
              }"
            >
              <p>
                <span>{{ item.title }}</span>
              </p>
              <p>{{ item.num }}人</p>
            </li>
          </template>
        </ul>
      </div>
    </header>
    <section>
      <div class="tableBox" ref="questionnaireBox">
        <ul
          class="questionnaireBox"
          ref="questionnaireBox"
          style="height: 100%"
        >
          <li
            v-for="(item, index) in showItem"
            :key="index"
            class="lis"
            :id="item.name"
          >
          <template v-if="item.isEnable">
            <div class="titles">
              <div>
                <i></i>
                <span
                  ><b>{{ item.title }}</b></span
                >
              </div>
              <div class="title-btn">
                <a-button
                  v-if="$store.state.isjj"
                  type="danger"
                  style="background: orange; border-color: orange"
                  :data-type="item.name"
                  @click="addRowData(item.name, item.title)"
                >
                  增加{{ item.title }}
                </a-button>
                <a-button
                  type="primary"
                  :data-type="item.name"
                  :disabled="!hasGroupName(item.name)"
                  @click="submintClass(item.name,'',1)"
                >
                  {{$store.state.isjj?'批量交班':'批量接班'}}</a-button
                >
                <a-popover trigger="hover" placement="bottomRight">
                  <template slot="content">
                    <span v-for="item in showItem" :key="item.name">
                      <a :href="'#' + item.name">{{ item.title }}</a>
                      <a-divider type="vertical" />
                    </span>
                  </template>
                  <a-button type="primary" ghost icon="more"></a-button>
                </a-popover>
              </div>
            </div>
            <template>
              <a-table
                :columns="isColumns(item.columns).column"
                :data-source="isColumns(item.columns).datas"
                bordered
                :pagination="false"
                :customRow="rowClick"
                size="small"
                :scroll="{ x: '100%', y: 'calc(100vh - 338px)' }"
                :rowKey="
                  (record, index) => {
                    return index;
                  }
                "
                :row-selection="{
                  selectedRowKeys: isColumns(item.columns).selectA,
                  onChange: isColumns(item.columns).selectChange,
                  columnWidth: 40,
                }"
              >
                  <template slot="tw" slot-scope="text,record">
                    <span  :style='{background:setItemColor(0,record.t),color:"#fff"}'>
                        {{record.t}}
                    </span>
                  </template>
                  <template slot="p" slot-scope="text,record">
                    <span  :style='{background:setItemColor(2,record.p),color:"#fff"}'>
                        {{record.p}}
                    </span>
                  </template>
                  <template slot="r" slot-scope="text,record">
                    <span  :style='{background:setItemColor(1,record.r),color:"#fff"}'>
                        {{record.r}}
                    </span>
                  </template>
                  <template slot="address" slot-scope="text, record">
                    <a
                      @click.stop="submintClass(item.name,record,0)"
                      ><a-icon type="interaction" />{{$store.state.isjj?'交班':'接班'}}</a
                    >
                    <template v-if="$store.state.isjj">
                      <template>
                        <a-popconfirm title="确认删除?" ok-text="确认" cancel-text="取消" @confirm="deleteClass(record)">
                          <a
                            style="color: red"
                            @click.stop=""
                            >
                          <a-icon type="delete" theme="filled" /> 刪除</a
                          >
                        </a-popconfirm>
                      </template>
                    </template>
                  </template>
                </a-table>
              </template>
            </template>
          </li>
        </ul>
      </div>
    </section>
    <a-drawer
      :title="!isEdit ? '新增' + editItemText : '编辑' + editItemText"
      placement="right"
      :closable="false"
      :visible="drawerVisible"
      @close="onDrawerClose"
      :width="450"
      style="height: 100%;z-index=800"
    >
      <div
        style="height: calc(100% - 60px); overflow-y: auto; overflow-x: hidden"
      >
        <xrbr-form
          v-on:openxrbr="openxrbr"
          v-if="editItem == 'hlShioverNewPatientDtos'"
          @ruquestData="ruquestData"
          :isEdit="isEdit"
          :editRowData="editRowData"
          ref="hlShioverNewPatientDtos"
        ></xrbr-form>
        <cybr-form
          v-on:openxrbr="openxrbr"
          v-if="editItem == 'hlShioverDischargedPatientDtos'"
          @ruquestData="ruquestData"
          :isEdit="isEdit"
          :editRowData="editRowData"
          ref="hlShioverDischargedPatientDtos"
        ></cybr-form>
        <ssbr-form 
          v-on:openxrbr="openxrbr"
          v-if="editItem == 'hlShioverSurgicalPatientDtos'"
          @ruquestData="ruquestData"
          :isEdit="isEdit"
          :editRowData="editRowData"
          ref="hlShioverSurgicalPatientDtos"
        ></ssbr-form>
        <bwbr-form 
          v-on:openxrbr="openxrbr"
          v-if="editItem == 'hlShioverCriticallyIllPatientDtos'"
          @ruquestData="ruquestData"
          :isEdit="isEdit"
          :editRowData="editRowData"
          ref="hlShioverCriticallyIllPatientDtos"
        ></bwbr-form>
        <bzbr-form 
          v-on:openxrbr="openxrbr"
          v-if="editItem == 'hlShioverSeriouslyIllPatientDtos'"
          @ruquestData="ruquestData"
          :isEdit="isEdit"
          :editRowData="editRowData"
          ref="hlShioverSeriouslyIllPatientDtos"
        ></bzbr-form>
        <tsbr-form
          v-on:openxrbr="openxrbr"
          v-if="editItem == 'hlShioverSpecialPatientDtos'"
          @ruquestData="ruquestData"
          :isEdit="isEdit"
          :editRowData="editRowData"
          ref="hlShioverSpecialPatientDtos"
        ></tsbr-form>
        <yjbr-form
          v-on:openxrbr="openxrbr"
          v-if="editItem == 'hlShioverFirstLevelNursingDtos'"
          @ruquestData="ruquestData"
          :isEdit="isEdit"
          :editRowData="editRowData"
          ref="hlShioverFirstLevelNursingDtos"
        ></yjbr-form>
      </div>
      <div style="height: 60px; line-height: 60px; text-align: center" v-if="$store.state.isjj">
        <a-button type="primary" @click="mounitChildrenData">确认</a-button>
        <a-button type="danger" ghost @click="drawerVisible = false"
          >取消</a-button
        >
      </div>
    </a-drawer>
    <!-- 7.8胖纸 -->
    <a-modal
      class="xzhzkuang"
      style="edit_kuang"
      v-model="xrbrvisible"
      width="94%"
      :title="'选择' + showItem[iszxhzindex].title"
      @ok="handleOk">
      <nexreJbSelect
        :BrOrDatail="BrOrDatail"
        :brDataType="brDataType"
        :brZyh="brZyh"
        v-on:closexrbr="closexrbr"
      ></nexreJbSelect>
    </a-modal>
  </div>
</template>
<script>
import { post, get, potdelete}from '../../../request/request';
import xrbrForm from "../../views/ChangeShifts/jjbModel/xrbrForm";
import cybrForm from "../../views/ChangeShifts/jjbModel/cybrForm";
import ssbrForm from "../../views/ChangeShifts/jjbModel/ssbrForm";
import bwbrForm from "../../views/ChangeShifts/jjbModel/bwbrForm";
import bzbrForm from "../../views/ChangeShifts/jjbModel/bzbrForm";
import tsbrForm from "../../views/ChangeShifts/jjbModel/tsbrForm";
import yjbrForm from "../../views/ChangeShifts/jjbModel/yjbrForm";
import nexreJbSelect from "../../views/ChangeShifts/jjbModel/nexreJb_Select";
const colxrhz = [
  {
    title: "床号",
    dataIndex: "bedNumber",
    sorter: (a, b) => a.bch.length - b.bch.length,
    align:'center',
    width: "70px",
  },
  {
    title: "姓名",
    dataIndex: "patientName",
    align:'center',
    width: "70px",
  },
  {
    title: "入院诊断",
    dataIndex: "diagnosis",
    align:'center',
    width: "270px",
  },
  {
    title: "时间",
    align:'center',
    children: [
      {
        title: "新入",
        dataIndex: "admissionTime",
        align:'center',
        width: 100,
      },
      {
        title: "转入",
        dataIndex: "transferTime",
        align:'center',
        width: 100,
      },
    ],
  },
  {
    title: "入院方式",
    dataIndex: "method",
    align:'center',
    width: "50px",
  },
  {
    title: "护理级别",
    dataIndex: "levelOfCare",
    align:'center',
    width: "80px",
  },
  {
    title: "T(℃)",
    dataIndex: "",
    align:'center',
    scopedSlots: { customRender: "tw" },
    width: "60px",
  },
  {
    title: "P(次分)",
    dataIndex: "",
    align:'center',
    scopedSlots: { customRender: "p" },
    width: "70px",
  },
  {
    title: "R(次分)",
    dataIndex: "",
    align:'center',
    scopedSlots: { customRender: "r" },
    width: "70px",
  },
  {
    title: "BP(mmHg)",
    dataIndex: "bp",
    align:'center',
    width: "120px",
   
  },
  {
    title: "白班病情",
    dataIndex: "dayShiftCondition",
    align:'center',
    width: "150px",
  },
  {
    title: "上夜病情",
    dataIndex: "lastNightCondition",
    align:'center',
    width: "150px",
  },
  {
    title: "下夜病情",
    dataIndex: "nextNightCondition",
    align:'center',
    width: "150px",
  },
  {
    title: "操作",
    width: "120px",
    align:'center',
    scopedSlots: { customRender: "address" },
  },
];
const colcyhz = [
  {
    title: "床号",
    dataIndex: "bedNumber",
    align:'center',
    sorter: (a, b) => a.bch.length - b.bch.length,
    width: "70px",
  },
  {
    title: "姓名",
    dataIndex: "patientName",
    align:'center',
    width: "70px",
  },
  {
    title: "出院诊断",
    align:'center',
    dataIndex: "diagnosis",
  },
  {
    title: "时间",
    align:'center',
    children: [
      {
        title: "出院",
        align:'center',
        dataIndex: "dischargeTime",
        width: 150,
      },
      {
        title: "转科",
        align:'center',
        dataIndex: "transferTime",
        width: 140,
      },
      {
        title: "死亡",
        align:'center',
        dataIndex: "timeOfDeath",
        width: 140,
      },
    ],
  },
  {
    title: "转往科室",
    align:'center',
    dataIndex: "transferInDepartmentId",
    width: 140,
  },
  {
    title: "操作",
    width: "120px",
    align:'center',
    scopedSlots: { customRender: "address" },
  },
];
const colbzhz = [
  {
    title: "床号",
    dataIndex: "bedNumber",
    sorter: (a, b) => a.bch.length - b.bch.length,
    width: "70px",
  },
  {
    title: "姓名",
    dataIndex: "patientName",
    width: "70px",
  },
  {
    title: "T(℃)",
    dataIndex: "t",
    width: "60px",
  },
  {
    title: "P(次分)",
    dataIndex: "p",
    width: "70px",
  },
  {
    title: "R(次分)",
    dataIndex: "r",
    width: "70px",
  },
  {
    title: "BP(mmHg)",
    width: "120px",
    dataIndex: "bp",
  },
  {
    title: "SPO2",
    dataIndex: "oxygenSaturation",
    width: "70px",
  },
  {
    title: "白班病情",
    dataIndex: "dayShiftCondition",
    align:'center',
    width: "150px",
  },
  {
    title: "上夜病情",
    dataIndex: "lastNightCondition",
    align:'center',
    width: "150px",
  },
  {
    title: "下夜病情",
    dataIndex: "nextNightCondition",
    align:'center',
    width: "150px",
  },
  {
    title: "操作",
    width: "120px",
    align:'center',
    scopedSlots: { customRender: "address" },
  },
];
const colbwhz = [
  {
    title: "床号",
    dataIndex: "bedNumber",
    sorter: (a, b) => a.bch.length - b.bch.length,
    width: "70px",
  },
  {
    title: "姓名",
    dataIndex: "patientName",
    width: "70px",
  },
  {
    title: "T(℃)",
    dataIndex: "t",
    width: "60px",
  },
  {
    title: "P(次分)",
    dataIndex: "p",
    width: "70px",
  },
  {
    title: "R(次分)",
    dataIndex: "r",
    width: "70px",
  },
  {
    title: "BP(mmHg)",
    dataIndex: "bp",
    width: "120px",
   
  },
  {
    title: "SPO2",
    dataIndex: "oxygenSaturation",
    width: "70px",
  },
  {
    title: "白板病情",
    dataIndex: "dayShiftCondition",
    align:'center',
    width: "150px",
  },
  {
    title: "上夜病情",
    dataIndex: "lastNightCondition",
    align:'center',
    width: "150px",
  },
  {
    title: "下夜病情",
    dataIndex: "nextNightCondition",
    align:'center',
    width: "150px",
  },
  {
    title: "操作",
    width: "120px",
    align:'center',
    scopedSlots: { customRender: "address" },
  },
];
const coltshz = [
  {
    title: "床号",
    dataIndex: "bedNumber",
    sorter: (a, b) => a.bch.length - b.bch.length,
    width: "70px",
  },
  {
    title: "姓名",
    dataIndex: "patientName",
    width: "70px",
  },
  {
    title: "T(℃)",
    dataIndex: "t",
    align:'center',
    width: "60px",
  },
  {
    title: "P(次分)",
    dataIndex: "p",
    align:'center',
    width: "70px",
  },
  {
    title: "R(次分)",
    dataIndex: "r",
    align:'center',
    width: "70px",
  },
  {
    title: "BP(mmHg)",
    align:'center',
    dataIndex: "bp",
    width: "120px",
   
  },
  {
    title: "诊断",
    dataIndex: "diagnosis",
  },
  {
    title: "护理级别",
    dataIndex: "levelOfCare",
  }, 
  {
    title: "特殊属性",
    dataIndex: "specialProperty",
  },
  {
    title: "操作",
    width: "120px",
    align:'center',
    scopedSlots: { customRender: "address" },
  },
];
const colsshz = [
  {
    title: "床号",
    dataIndex: "bedNumber",
    sorter: (a, b) => a.bch.length - b.bch.length,
    width: "70px",
  },
  {
    title: "姓名",
    dataIndex: "patientName",
    width: "70px",
  },
  {
    title: "T(℃)",
    dataIndex: "t",
    width: "60px",
  },
  {
    title: "P(次分)",
    dataIndex: "p",
    width: "70px",
  },
  {
    title: "R(次分)",
    dataIndex: "r",
    width: "70px",
  },
  {
    title: "BP(mmHg)",
    dataIndex: "bp",
    width: "90px",
   
  },
  {
    title: "主要诊断",
    dataIndex: "diagnosis",
    width: "120px",
  },
  {
    title: "手术名称",
    dataIndex: "surgeryName",
    width: "120px",
  },
  {
    title: "时间",
    children: [
      {
        title: "手术时间",
        dataIndex: "surgeryTime",
        width: 100,
      },
      {
        title: "送回病房时间",
        dataIndex: "returnTime",
        width: 100,
      },
    ],
  },
  {
    title: "麻醉方式",
    dataIndex: "anesthesia",
    width: "120px",
  },
  {
    title: "白班病情",
    dataIndex: "dayShiftCondition",
    width: "120px",
  },
  {
    title: "上夜病情",
    dataIndex: "lastNightCondition",
    width: "120px",
  },
  {
    title: "下夜病情",
    dataIndex: "nextNightCondition",
    width: "120px",
  },
  {
    title: "操作",
    width: "120px",
    align:'center',
    scopedSlots: { customRender: "address" },
  },
];
const colyjhz = [
  {
    title: "床号",
    dataIndex: "bedNumber",
    sorter: (a, b) => a.bch.length - b.bch.length,
    width: "70px",
  },
  {
    title: "姓名",
    dataIndex: "patientName",
    width: "70px",
  },
  {
    title: "T(℃)",
    dataIndex: "t",
    width: "60px",
  },
  {
    title: "P(次分)",
    dataIndex: "p",
    width: "70px",
  },
  {
    title: "R(次分)",
    dataIndex: "r",
    width: "70px",
  },
  {
    title: "BP(mmHg)",
    dataIndex: "bp",
    width: "120px",
   
  },
  {
    title: "SPO2",
    dataIndex: "oxygenSaturation",
    width: "70px",
  },
  {
    title: "白板病情",
    dataIndex: "dayShiftCondition",
    align:'center',
    width: "150px",
  },
  {
    title: "上夜病情",
    dataIndex: "lastNightCondition",
    align:'center',
    width: "150px",
  },
  {
    title: "下夜病情",
    dataIndex: "nextNightCondition",
    align:'center',
    width: "150px",
  },
  {
    title: "操作",
    width: "120px",
    align:'center',
    scopedSlots: { customRender: "address" },
  },
];
export default {
  name: "nexreJb",
  data() {
    let topDataList = [
      //顶部数据的集合
      { title: "病人总数",name:'patientCount',num: "" },
      { title: "新入患者",name:'newEntrantCount',num: ""},
      { title: "转入",name:'transferInCount',num: ""},
      { title: "出院",name:'dischargedCount',num: ""},
      { title: "转出",name:'transferOutCount',num: ""},
      { title: "死亡",name:'deathCount',num: ""},
      { title: "一级护理",name:'firstLevelNursCount',num: ""},
      { title: "手术", name:'surgeryCount',num: ""},
      { title: "分娩",name:'childbirthCount',num: ""},
      { title: "病重",name:'seriouslyIllCount',num: ""},
      { title: "病危",name:'criticallyIllCount',num: ""},
      { title: "特殊",name:'specialCount',num: ""},
    ];
  
    let showItem = [
      //读取过来护士选中那些项目需要展示
      { name: "hlShioverNewPatientDtos", columns: "colxrhz", title: "新入患者",isEnable: true},
      { name: "hlShioverDischargedPatientDtos", columns: "colcyhz", title: "出院患者",isEnable: true },
      { name: "hlShioverSeriouslyIllPatientDtos", columns: "colbzhz", title: "病重患者",isEnable: true },
      { name: "hlShioverCriticallyIllPatientDtos", columns: "colbwhz", title: "病危患者",isEnable: true },
      { name: "hlShioverFirstLevelNursingDtos", columns: "colyjhz", title: "一级护理",isEnable: true },
      { name: "hlShioverSurgicalPatientDtos", columns: "colsshz", title: "手术患者",isEnable: true },
      { name: "hlShioverSpecialPatientDtos", columns: "coltshz", title: "特殊患者",isEnable: true },
    ];
    return {
      drawerVisible: false, //抽屉显示与隐藏
      topDataList, //顶部显示的所有项目数据
      showItem, //护士选择了那些项目需要显示
      isEdit: false, //判断点击的新增按钮还是点击的tr编辑
      editItem: null, //编辑或者新增的哪一个项目，新入，病危，病重。。。
      editItemText: null, //
      editIndex: null, //编辑了数据的哪一条数据
      editRowData: null, //编辑哪一行数据具体内容
      visible: false,
      BrOrDatail:1,//选择的病人列表还是详情界面
      brDataType:0,//查询病人的类型，当前在院所有患者 0 新入患者 1 出院患者 2 病重患者 3 病危患者 4 一级护理 5 手术患者 6 特殊患者 7
      brZyh:null,//查询当前病人的所有护理记录体征数据，t,p,r,bp
      title1: "白班",
      title2: "夜班",
      dataType: "全科",
      valVerification:[],//体温，脉搏，呼吸项目的阈值显示
      showOption: false, //显示电梯
      //table对应的数据源JSON
      hlShioverNewPatientDtos:null,
      hlShioverDischargedPatientDtos:null,
      hlShioverSeriouslyIllPatientDtos:null,
      hlShioverCriticallyIllPatientDtos:null,
      hlShioverSpecialPatientDtos:null,
      hlShioverSurgicalPatientDtos:null,
      hlShioverFirstLevelNursingDtos:null,
      //table对应的数据表头JSON
      colxrhz,
      colcyhz,
      colbzhz,
      colbwhz,
      coltshz,
      colsshz,
      colyjhz,
      //各个表格复选框对应的复选框选中的数据
      hlShioverNewPatientDtosRowKeys: [],
      hlShioverDischargedPatientDtosRowKeys: [],
      hlShioverSeriouslyIllPatientDtosRowKeys: [],
      hlShioverCriticallyIllPatientDtosRowKeys: [],
      hlShioverSpecialPatientDtosRowKeys: [],
      hlShioverSurgicalPatientDtosRowKeys: [],
      hlShioverFirstLevelNursingDtosRowKeys: [],
      // 7.8胖纸
      iszxhzindex: "0", //点击增加患者的index
      xrbrvisible: false, //选择患者是否弹出对话框
    };
  },
  methods: {
    //设置体温，脉搏，呼吸，等项目的阈值显示效果
    setItemColor(type,val){
      var color="";
      for(var i in this.valVerification){
        if(this.valVerification[i].type ==type){
          var newType = this.judgeSymbolType(this.valVerification[i].symbol);
          if(newType=="<"){
            if(val < this.valVerification[i].value){
              color="blue";
            }
          }
          if(newType=="="){
            if(val == this.valVerification[i].value){
              color="green";
            }
          }
          if(newType==">"){
            if(val > this.valVerification[i].value){
              color="red";
            }
          }
          if(newType=="<="){
            if(val <= this.valVerification[i].value){
              color="purple";
            }
          }
          if(newType==">="){
            if(val >= this.valVerification[i].value){
              color="orange";
            }
          }
        }
      }
      return color==""?"black":color;
    },
    //返回判断上面函数中的symbol类型-0小于1等于2大于3小于等于4大于等于
    judgeSymbolType(type){
      switch(type){
        case 0:
          return "<"
        break;
          case 1:
          return "="
        break;
          case 2:
        return ">"
          break;
          case 3:
        return "<="
          break;
          case 4:
        return ">="
          break;
      }
    },
    //获取顶部小框的各个类型的数据
    async getTopItemData(type){
      const res = await get('/han/HandoverProc/GetPatientNumber/'+type);
      if(res.result){
        for(var i in res.result[0]){
          for(var y in this.topDataList){
            if(i==this.topDataList[y].name){
              this.topDataList[y].num = res.result[0][i]
            }
          }
        }
      }else{
        this.$message.error(res.msg);
      }
    },
    //获取交班的数据
    async getAlldeptData(){
      const res = await get('/han/HandoverProc/GetHandoverPatients?handoverTime='+localStorage.handoverTime+'&orderOfClassesId='+localStorage.orderOfClassesId);
      console.log(res)
      if(res.result){
        this.hlShioverNewPatientDtos = this.filterJbData(res.result.hlShioverNewPatientDtos);
        this.hlShioverDischargedPatientDtos =  this.filterJbData(res.result.hlShioverDischargedPatientDtos);
        this.hlShioverSeriouslyIllPatientDtos =  this.filterJbData(res.result.hlShioverSeriouslyIllPatientDtos);
        this.hlShioverCriticallyIllPatientDtos =  this.filterJbData(res.result.hlShioverCriticallyIllPatientDtos);
        this.hlShioverSpecialPatientDtos =  this.filterJbData(res.result.hlShioverSpecialPatientDtos);
        this.hlShioverSurgicalPatientDtos =  this.filterJbData(res.result.hlShioverSurgicalPatientDtos);
        this.hlShioverFirstLevelNursingDtos =  this.filterJbData(res.result.hlShioverFirstLevelNursingDtos);
        this.addField();
      }else{
        this.$message.error(res.msg);
      }
    },
    //获取设置中间区域的显示项目
    async getShowItem(){
      const res = await get('/han/Handover/GetShiftSetting',{});
      if(res.result){
        this.valVerification = res.result.hlShioverOutlier;
        for(var i in res.result.hlShioverContent){
          for(var y in this.showItem){
            if(i==y){
              this.showItem[y].isEnable = res.result.hlShioverContent[i].isEnable
            }
          }
        }
      }else{
        this.$message.error(res.msg);
      }
    },
    //判断当前是交班还是接班，返回对应的JSON数据
    filterJbData(data){
      var newArr=[];
      for(var i in data){
        if(this.$store.state.isjj && !data[i].isHandover){
          newArr.push(data[i]);  
        }
        if(!this.$store.state.isjj && data[i].isHandover && !data[i].isSucceed){
          newArr.push(data[i]); 
        }
      }
      return newArr;
    },
    //循环添加两个属性
    addField(){
      var arr=  [
        {name:this.hlShioverNewPatientDtos,type:'hlShioverNewPatientDtos',title:'新入患者'},
        {name:this.hlShioverDischargedPatientDtos,type:'hlShioverDischargedPatientDtos',title:'出院患者'},
        {name:this.hlShioverSeriouslyIllPatientDtos,type:'hlShioverSeriouslyIllPatientDtos',title:'病重患者'},
        {name:this.hlShioverCriticallyIllPatientDtos,type:'hlShioverCriticallyIllPatientDtos',title:'病危患者'},
        {name:this.hlShioverSpecialPatientDtos,type:'hlShioverSpecialPatientDtos',title:'特殊患者'},
        {name:this.hlShioverSurgicalPatientDtos,type:'hlShioverSurgicalPatientDtos',title:'手术患者'},
        {name:this.hlShioverFirstLevelNursingDtos,type:'hlShioverFirstLevelNursingDtos',title:'一级患者'}
        ]
      
      for(let i = 0; i < arr.length; i++){
        for(let y = 0;y<arr[i].name.length;y++){
          arr[i].name[y].type =arr[i].type;
          arr[i].name[y].title =arr[i].title;
        }
      }
    },
    //监听新增数据
    addRowData(itemType, itemTitle) {//子项类型，子项名称
      this.isEdit = false; //表示新增
      this.editItem = itemType;
      this.editItemText = itemTitle;
      this.drawerVisible = true;//抽屉右侧划出
      this.editRowData =null;//既然是新增那这个肯定是空的
    },
    //监听对话框
    onDrawerClose() {
      this.drawerVisible = !this.drawerVisible;
    },
    //更新全局数据
    updateGroupData() {
      this.$message.success("厉害了");
    },
    rowClick(record, index) {
      //点击编辑行时方法
      return {
        on: {
          // 鼠标单击行
          click: (event) => {
            this.drawerVisible = true;//右侧编辑界面抽屉划出
            this.isEdit = true; //表示修改行数据
            this.editItem = record.type;//子项类型
            this.editItemText = record.title;//子项名称
            this.editIndex = index;//修改了子项数据集中的第几行
            this.editRowData = record;//将行数据当做参数传入到子页面方便修改查看
          },
        },
      };
    },
    mounitChildrenData() {
      var _thisEdit = this.editItem;
      this.$refs[_thisEdit].onSubmit();
    },
    //触发新增
    ruquestData(obj) {
      this.insertItemData('jbDate','Bid',obj)
    },
    //新增
    async insertItemData(jbDate,Bid,vals){//交班时间，班次,修改&新增的数据
      var obj = {}
      var datas  =vals.type;//获取数据的type当做变量当做数组容器
      var title= vals.type;//获取数据的type当做变量当做数组名称
      datas=[];//更改变量类型为Array
      datas.push(vals);//装数据
      obj[title] = datas;//为objs对象的键/值
      console.log(obj)
      const res = await post('/han/HandoverProc/SaveHandoverPatients?handoverTime='+localStorage.handoverTime+'&orderOfClassesId='+localStorage.orderOfClassesId, obj);
      console.log(res)
      if(res.result){
        this.$message.success(res.msg);
        this.getAlldeptData()
        this.drawerVisible = false;
      }else{
        this.$message.error(res.msg)
      }
    },
    //提交数据&批量交班
    async submintClass(type,rowData,isPl){
      var obj = {};
      var datas =type;
      var title= type;
      var checkIndex=this[type+'RowKeys'];
      datas=[];
      if(isPl==1){
        for(var t in checkIndex){
          datas.push(this[type][t])
        }
        obj[title] = datas;
      }else{
        datas.push(rowData)
        obj[title] = datas;
      }
      console.log(obj)
      let res;
      if(this.$store.state.isjj){//表示交班
        res = await post('/han/HandoverProc/BatchShift', obj);
      }else{//接班
        res = await post('/han/HandoverProc/BatchSuccession', obj);
      }
      if(res.result){
        this.$message.success(res.msg);
        this.getAlldeptData('全科');
        this[type+'RowKeys'].length=0;
      }else{
        this.$message.success(res.msg);
        this[type+'RowKeys'].length=0;
      }
    },
    //删除数据
    async deleteClass(rowData){
      var obj = {}
      var datas  =rowData.type;//获取数据的type当做变量当做数组容器
      var title= rowData.type;//获取数据的type当做变量当做数组名称
      datas=[];//更改变量类型为Array
      datas.push(rowData);//装数据
      obj[title] = datas;//为obj对象的键/值
      const res = await potdelete('/han/HandoverProc/DeleteHandoverPatients', obj);
      if(res.result){
        this.$message.success(res.msg);
        this.getAlldeptData()
      }else{
        this.$message.success(res.msg)
      }
    },
    isColumns(i) {
      //判断分组名，返回对应的表头
      var str = null;
      var dataList = null;
      var selectAyy = null;
      var selectChange = null;
      switch (i) {
        case "colxrhz":
          str = this.colxrhz;
          dataList = this.hlShioverNewPatientDtos;
          selectAyy = this.hlShioverNewPatientDtosRowKeys;
          selectChange = this.hlShioverNewPatientDtosChange;
          break;
        case "colcyhz":
          str = this.colcyhz;
          dataList = this.hlShioverDischargedPatientDtos;
          selectAyy = this.hlShioverDischargedPatientDtosRowKeys;
          selectChange = this.hlShioverDischargedPatientDtosChange;
          break;
        case "colbzhz":
          str = this.colbzhz;
          dataList = this.hlShioverSeriouslyIllPatientDtos;
          selectAyy = this.hlShioverSeriouslyIllPatientDtosRowKeys;
          selectChange = this.hlShioverSeriouslyIllPatientDtosChange;
          break;
        case "colbwhz":
          str = this.colbwhz;
          dataList = this.hlShioverCriticallyIllPatientDtos;
          selectAyy = this.hlShioverCriticallyIllPatientDtosRowKeys;
          selectChange = this.hlShioverCriticallyIllPatientDtosChange;
          break;
        case "coltshz":
          str = this.coltshz;
          dataList = this.hlShioverSpecialPatientDtos;
          selectAyy = this.hlShioverSpecialPatientDtosRowKeys;
          selectChange = this.hlShioverSpecialPatientDtosChange;
          break;
        case "colsshz":
          str = this.colsshz;
          dataList = this.hlShioverSurgicalPatientDtos;
          selectAyy = this.hlShioverSurgicalPatientDtosRowKeys;
          selectChange = this.hlShioverSurgicalPatientDtosChange;
          break;
        case "colyjhz":
          str = this.colyjhz;
          dataList = this.hlShioverFirstLevelNursingDtos;
          selectAyy = this.hlShioverFirstLevelNursingDtosRowKeys;
          selectChange = this.hlShioverFirstLevelNursingDtosChange;
          break;
        default:
          break;
      }
      return {
        column: str,
        datas: dataList,
        selectA: selectAyy,
        selectChange: selectChange,
      };
    },
    hasGroupName(name) {
      return this[name+'RowKeys'].length > 0;
    },
    hlShioverNewPatientDtosChange(selectedRowKeys, selectedRows) {
      this.hlShioverNewPatientDtosRowKeys = selectedRowKeys;
    },
    hlShioverDischargedPatientDtosChange(selectedRowKeys, selectedRows) {
      this.hlShioverDischargedPatientDtosRowKeys = selectedRowKeys;
    },
    bhlShioverSeriouslyIllPatientDtosChange(selectedRowKeys, selectedRows) {
      this.hlShioverSeriouslyIllPatientDtosRowKeys = selectedRowKeys;
    },
    hlShioverCriticallyIllPatientDtosChange(selectedRowKeys, selectedRows) {
      this.hlShioverCriticallyIllPatientDtosRowKeys = selectedRowKeys;
    },
    hlShioverSpecialPatientDtosChange(selectedRowKeys, selectedRows) {
      this.hlShioverSpecialPatientDtosRowKeys = selectedRowKeys;
    },
    hlShioverSurgicalPatientDtosChange(selectedRowKeys, selectedRows) {
      this.hlShioverSurgicalPatientDtosRowKeys = selectedRowKeys;
    },
    hlShioverFirstLevelNursingDtosChange(selectedRowKeys, selectedRows) {
      this.hlShioverFirstLevelNursingDtosRowKeys = selectedRowKeys;
    },
    // 7.8胖纸
    handleOk(e) {
      //编辑确定方法
      this.xrbrvisible = false;
    },
    closexrbr(msg) {
      this.assignment(msg)
      this.xrbrvisible = false;
    },
    assignment(record) {
      this.isEdit = true; //表示新增
      this.editRowData = record;
      this.drawerVisible = true;
    },
    openxrbr(type,dataType,zyh) {
      this.BrOrDatail=type;
      this.brDataType=dataType;
      this.brZyh=zyh,
      this.xrbrvisible = true;
    },
    //生成交班数据
    async createJbDate(){
      const res = await get('/han/HandoverProc/GetSuccessionData/'+localStorage.handoverTime);
      console.log(res)
      if(res.result){
        this.$message.success(res.msg);
        //this.getAlldeptData()
      }else{
        this.$message.success(res.msg)
      }
    }
  },
  components: {
    xrbrForm,
    cybrForm,
    ssbrForm,
    bwbrForm,
    bzbrForm,
    tsbrForm,
    yjbrForm,
    nexreJbSelect,
  },
  computed: {
    updateGroupData1() {
      return this.$store.state.updateGroupData;
    },
    jbjb(){
      return this.$store.state.isjj;
    },
    AllOrIndividual(){
      return this.$store.state.dataType;
    },
    createJbsj(){
      return this.$store.state.createJbsj;
    }
  },
  watch: {
    //监听点击更新数据按钮
    updateGroupData1: function (old, newd) {
      if (old) {
        console.log(this.$store.state.dataType)
        this.getAlldeptData();
        this.getTopItemData(this.$store.state.dataType)
        this.getShowItem();
        setTimeout(()=>{
          this.$store.commit("updateGroupData", false);
        },2000);
      }
    },
    //点击显示顶部的全科数据或者本人
    AllOrIndividual: function (old, newd) {
      if (old==1) {
        this.getTopItemData(1)
      }else{
        this.getTopItemData(0)
      }
    },
    jbjb: function (old, newd) {
      if (old) {
        this.getAlldeptData();
      }else{
        this.getAlldeptData();
      }
    },
    createJbsj: function (old, newd) {
      if (old) {
        this.createJbDate()
        setTimeout(()=>{
          this.$store.commit('updateCreateJbsj',false);
        },1500)
      }
    },
  },
  mounted(){
    this.getAlldeptData();
    this.getTopItemData(0)
    this.getShowItem();
  }
};
</script>
<style scoped>
ul {
  list-style: none;
  padding: 0;
  margin: 0;
}
.lis {
  margin-top: 10px;
}
.box {
  height: 100%;
  border-radius: 5px;
}
.box header {
  background: #fff;
  padding: 10px;
  border-radius: 0 0 7px 7px;
}
.box section {
  height: calc(100% - 91px);
  margin-top: 12px;
  border-radius: 7px;
  background: #fff;
  padding: 10px;
}
.box section .tableBox {
  height: 100%;
  overflow-y: auto;
}
.ant-tabs-tab > span {
  font-size: 15px;
  font-weight: bold;
}
.heads {
  display: flex;
  align-items: center;
  text-align: center;
}
.heads > span {
  width: 40px;
  font-size: 17px;
  font-weight: bold;
}
.itemBox {
  flex: 1;
  display: flex;
  justify-content: space-between;
  margin: 0;
  padding: 0;
}
.itemBox li {
  width: 90px;
  height: 60px;
  text-align: center;
  border-radius: 5px;
}
.itemBox li p:first-child {
  margin-top: -12px;
}
.itemBox li p:first-child span {
  background: #fff;
}
.itemBox li p:last-child {
  margin-top: -5px;
  font-size: 15px;
}
.titles {
  display: flex;
  align-items: center;
  justify-content: space-between;
  margin-bottom: 15px;
}
.titles div:first-child i {
  display: inline-block;
  width: 5px;
  height: 28px;
  background: orange;
  vertical-align: middle;
  border-radius: 3px;
}
.title-btn {
  display: flex;
  align-items: center;
  justify-content:flex-end;
  width: 266px;
}
.title-btn button{
  margin-left:10px;
}
.tableBox::-webkit-scrollbar {
  /*滚动条整体样式*/
  width: 0px !important; /*高宽分别对应横竖滚动条的尺寸*/
  height: 0px !important;
  background: #ffffff !important;
  cursor: pointer !important;
}

.tableBox::-webkit-scrollbar-thumb {
  /*滚动条里面小方块*/
  border-radius: 5px !important;
  background: rgba(63, 98, 131, 0.8) !important;
  cursor: pointer !important;
}

.tableBox::-webkit-scrollbar-track {
  /*滚动条里面轨道*/
  border-radius: 0 !important;
  background: rgba(240, 240, 240, 0.5) !important;
  cursor: pointer !important;
}
section >>> .ant-table-thead > tr > th {
  background: #eaf0f6 !important;
  color: #196d9d !important;
  font-weight: bold;
}
section >>> .ant-table-small > .ant-table-content > .ant-table-body {
  margin: 0;
}
.xzhzkuang >>> .ant-modal-footer {
  display: none;
}
</style>
