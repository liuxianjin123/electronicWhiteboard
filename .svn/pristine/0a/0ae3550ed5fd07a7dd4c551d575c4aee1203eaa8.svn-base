<template>
    <div style="height: 550px;font-size: 16px;">
        <div class="fz">
            <span class="xin"> * </span>
             分组名称： <input type="text" :value="group_name" @input="input_blur($event)"  placeholder="请输入分组名称" name="group_name">
            <span style="margin-left: 10px;" v-if="isTips">
                <a-icon type="check-circle" style="color:#77d14a;" />
            </span> 
            <span style="margin-left: 10px;" v-else>
                <a-icon type="close-circle" style="color:red;"/> {{wrong}}
            </span> 
        </div>

        <div class="fz">
            <span class="kon">组员:</span>
            <input type="text" placeholder="请选择人员名称" v-model="value" disabled name="personnel" >
        </div>
        <div class="personnels">
            <a-checkbox-group style="" @change="onChange" v-model="value" :value="['Pear2']" name="checkboxgroup" :options="options"/>
        </div>
        <div class="Tube">
            <span class="kon">管床:</span>
            <div class="Tube_bed">
                <a-locale-provider :locale="zhCN">
                    <a-transfer
                    class="tree-transfer"
                    :data-source="dataSource"
                    :target-keys="targetKeys"
                    :render="item => item.title"
                    :show-select-all="false"
                    @change="onChange_gc"
                    
                    >
                    <!-- <a-transfer
                    :data-source="mockData"
                    :titles="['Source', 'Target']"
                    :target-keys="targetKeys"
                    :selected-keys="selectedKeys"
                    :render="item => item.title"
                    :disabled="disabled"
                    @change="onChange_gc"
                    @selectChange="handleSelectChange"
                    @scroll="handleScroll"
                    > -->
                        <template
                            slot="children"
                            slot-scope="{ props: { direction, selectedKeys }, on: { itemSelect } }"
                        >
                            <a-tree
                            v-if="direction === 'left'"
                            blockNode
                            checkable
                            checkStrictly
                            defaultExpandAll
                            :checkedKeys="[...selectedKeys, ...targetKeys]"
                            :treeData="treeData"
                            @check="
                                (_, props) => {
                                onChecked(_, props, [...selectedKeys, ...targetKeys], itemSelect);
                                }
                            "
                            @select="
                                (_, props) => {
                                onChecked(_, props, [...selectedKeys, ...targetKeys], itemSelect);
                                }
                            "
                            />
                        </template>
                    </a-transfer>
                </a-locale-provider>
            </div>
        </div>




    </div>
</template>
<script>
import zhCN from 'ant-design-vue/es/locale-provider/zh_CN';

const treeData = [
  { key: '0-0', title: '0-0' },
  {
    key: '0-1',
    title: '0-1',
    children: [
      { key: '0-1-0', title: '0-1-0' },
      { key: '0-1-1', title: '0-1-1' },
    ],
  },
  
  { key: '0-2', title: '0-3' },
];

const transferDataSource = [
    { key: '0-021', title: '0-066' },
    { key: '0-11', title: '0-886' },
];
function flatten(list = []) {
  list.forEach(item => {
    transferDataSource.push(item);
    flatten(item.children);
  });
}
flatten(JSON.parse(JSON.stringify(treeData)));

function isChecked(selectedKeys, eventKey) {
  return selectedKeys.indexOf(eventKey) !== -1;
}

function handleTreeData(data, targetKeys = []) {
  data.forEach(item => {
    item['disabled'] = targetKeys.includes(item.key);
    if (item.children) {
      handleTreeData(item.children, targetKeys);
    }
  });
  return data;
}

export default {
    data(){
    return{
       zhCN,
       wrong:'请输入分组名称' ,
       isTips:false,
       group_name:'默认责任组',
       options:[
        { label: '张萧何', value: 'Apple1' },
        { label: '李大姐', value: 'Pear2' },
        { label: '安静的', value: 'Orange3' },
        { label: '安静的大', value: 'Orange14' },
        { label: '张萧何', value: 'Apple5' },
        { label: '李大姐', value: 'Pear6' },
        { label: '安静的', value: 'Orange7' },
        { label: '安静的大', value: 'Orange18' },
        { label: '张萧何', value: 'Apple9' },
        { label: '李大姐', value: 'Pear0' },
        { label: '安静的', value: 'Orange09' },
        { label: '安静的大', value: 'Orange108' },
        { label: '张萧何', value: 'Apple07' },
        { label: '李大姐', value: 'Pear06' },
        { label: '安静的', value: 'Orange05' },
        { label: '安静的大', value: 'Orange104' },
        { label: '张萧何', value: 'Apple03' },
        { label: '李大姐', value: 'Pear02' },
        { label: '安静的', value: 'Orange01' },
        { label: '安静的大', value: 'Orange191' },
        { label: '张萧何', value: 'Apple92' },
        { label: '李大姐', value: 'Pear93' },
        { label: '安静的', value: 'Orange94' },
        { label: '安静的大', value: 'Orange195' },
        { label: '张萧何', value: 'Apple96' },
        { label: '李大姐', value: 'Pear97' },
        { label: '安静的', value: 'Orange98' },
        { label: '安静的大', value: 'Orange199' },
        ],
       value:[],
       targetKeys: [],
      dataSource: transferDataSource,
    }
    },
    computed: {
        treeData() {
        return handleTreeData(treeData, this.targetKeys);
        },
    },
    props:{
        
    },
    methods: {
        input_blur(event){
            if(event.currentTarget.value.length>1){
                this.isTips=true;
            }else{
                this.wrong='请输入两个字及以上分组名称';
                this.isTips=false;
            }
            
        },
        onChange(checkedValues) {//选中复选框
            console.log('checked = ', checkedValues);
            console.log('value = ', this.value);
            console.log(this.options[0].value);
            
        },
        onChange_gc(targetKeys) {//选中树形复选框
        console.log('Target Keys:', targetKeys);
        this.targetKeys = targetKeys;
        },
        onChecked(_, e, checkedKeys, itemSelect) {
        const { eventKey } = e.node;
        itemSelect(eventKey, !isChecked(checkedKeys, eventKey));
        },

    }
}
</script>
<style scoped>
.xin{
    float: left;
    font-size: 25px;
    color: #CC0000;
}
.kon{
    margin-left: 15px;
    letter-spacing: 13px
}
.fz{
    height: 50px;
    line-height: 50px;
}
input[type='text']{
    width: 50%;
    height: 40px;
    border: 1px solid #ccc;
    text-shadow: none;
    outline-style: none;
    border-radius: 5px;
}
.personnels{
   width: 80%;
   height: 150px;
   margin-left: 8.5%;
   margin-top: 2%;
   border: 1px solid #ccc;
   border-radius: 5px;
   overflow: auto;
   padding: 10px;
}
.personnels>>>.ant-checkbox-group-item{
    width: 15%;
    margin-top: 5px;
}
.usage{
    width: 50%;
    display: inline-block;
}
.Tube{
    margin-top:20px;
}
.Tube_bed{
    width: 80%;
    height: 249px;
    margin-left: 8.5%;
    /* margin-top: 2%; */
    /* border: 1px solid #ccc; */
    border-radius: 5px;
    overflow: auto;
    padding: 10px;
}
.tree-transfer .ant-transfer-list:first-child {
  width: 50%;
  flex: none;
}
</style>